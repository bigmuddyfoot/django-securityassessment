# Generated by Django 5.1.7 on 2025-03-15 21:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('item_number', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('unit_type', models.CharField(help_text='e.g., per device, per user, per site', max_length=100)),
                ('quantity_source_count_type', models.CharField(blank=True, help_text='Count type to pull quantity from (e.g., pc, server)', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_started', models.DateTimeField(auto_now_add=True)),
                ('date_completed', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('completed', 'Completed')], default='in_progress', max_length=20)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessments', to='assessment.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('explanation_text', models.TextField(blank=True, null=True)),
                ('video_url', models.URLField(blank=True, null=True)),
                ('audio_url', models.URLField(blank=True, null=True)),
                ('pdf_url', models.URLField(blank=True, null=True)),
                ('external_link', models.URLField(blank=True, null=True)),
                ('question_type', models.CharField(choices=[('yes_no', 'Yes/No'), ('multiple_choice', 'Multiple Choice'), ('input', 'Input')], max_length=50)),
                ('weight', models.IntegerField(default=1, help_text='Weight of this question in scoring')),
                ('neutral', models.BooleanField(default=False, help_text='If true, does not affect score')),
                ('is_count_question', models.BooleanField(default=False, help_text='Marks if this is a global count question')),
                ('count_type', models.CharField(blank=True, help_text='Type of count (e.g., pc, server)', max_length=100, null=True)),
                ('recommend_if_yes', models.BooleanField(default=False, help_text='Recommend product even if answered Yes but upgrade')),
                ('recommend_if_unknown', models.BooleanField(default=False, help_text='Recommend product if Unknown')),
                ('conditional_value', models.CharField(blank=True, help_text='Triggering answer value', max_length=255, null=True)),
                ('order', models.IntegerField(default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='assessment.category')),
                ('conditional_on', models.ForeignKey(blank=True, help_text='Show this question only if another is answered a certain way', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conditional_questions', to='assessment.question')),
                ('quantity_source_question', models.ForeignKey(blank=True, help_text='Use answer from this question for quantity', null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessment.question')),
                ('recommended_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='linked_questions', to='assessment.product')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255)),
                ('score_value', models.IntegerField(blank=True, null=True)),
                ('flag_required', models.BooleanField(default=False, help_text='Flag this option for review if chosen')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='assessment.question')),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('flag_required', models.BooleanField(default=False)),
                ('date_answered', models.DateTimeField(auto_now_add=True)),
                ('note', models.TextField(blank=True, help_text='Optional note for explanation or context', null=True)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='assessment.assessment')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessment.question')),
                ('selected_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='assessment.questionoption')),
            ],
        ),
    ]
